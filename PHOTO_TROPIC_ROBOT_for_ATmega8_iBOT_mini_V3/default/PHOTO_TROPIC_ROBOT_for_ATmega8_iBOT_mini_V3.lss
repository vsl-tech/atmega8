
PHOTO_TROPIC_ROBOT_for_ATmega8_iBOT_mini_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000091  00000000  00000000  0000015b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000005b  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000117  00000000  00000000  00000247  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d7  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ec       	ldi	r30, 0xCC	; 204
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	36 c0       	rjmp	.+108    	; 0xc8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:

#include<avr/io.h>

void main()
{
	DDRD=0b11111111;	// set PD4 as output bit
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	81 bb       	out	0x11, r24	; 17
	DDRC=0b0000000;   	// set PORTC as input port
  62:	14 ba       	out	0x14, r1	; 20
	DDRB=0b00011110;  	// PB1, PB2, PB3, PB4 as output port
  64:	8e e1       	ldi	r24, 0x1E	; 30
  66:	87 bb       	out	0x17, r24	; 23
	
		if((rs==0b0000000)&(ls==0b0001000))  // check sensor status for left sensor=ON and
		                                     // right sensor=OFF
		{
			 
			PORTB=0b000000010;   // turn left
  68:	e2 e0       	ldi	r30, 0x02	; 2
			PORTD = (1<<4);
  6a:	60 e1       	ldi	r22, 0x10	; 16

        if((rs==0b0000001)&(ls==0b0001000)) // check sensor status for both sensor ON 
		
		{

			PORTB=0b00010010;  // move forward
  6c:	72 e1       	ldi	r23, 0x12	; 18
					  	// acquire the left sensor status in ls and right sensor
						// status in rs 
		
	while(1)        	// create infinite loop
	{
	rs=(PINC&0b0000001);   // acquire only left sensor status connected at PC0
  6e:	83 b3       	in	r24, 0x13	; 19
  70:	90 e0       	ldi	r25, 0x00	; 0
	ls=(PINC&0b0001000);   // acquire only right sensor status connected at PC3
  72:	23 b3       	in	r18, 0x13	; 19
  74:	30 e0       	ldi	r19, 0x00	; 0
  76:	28 70       	andi	r18, 0x08	; 8
  78:	30 70       	andi	r19, 0x00	; 0
	PORTD &= ~(1<<4);		
  7a:	94 98       	cbi	0x12, 4	; 18

		if((rs==0b0000000)&(ls==0b0000000)) // check sensor status for both sensor OFF 
  7c:	ac 01       	movw	r20, r24
  7e:	41 70       	andi	r20, 0x01	; 1
  80:	50 70       	andi	r21, 0x00	; 0
  82:	80 fd       	sbrc	r24, 0
  84:	04 c0       	rjmp	.+8      	; 0x8e <main+0x30>
  86:	21 15       	cp	r18, r1
  88:	31 05       	cpc	r19, r1
  8a:	09 f4       	brne	.+2      	; 0x8e <main+0x30>
		{

			PORTB=0b00000000;  // stop
  8c:	18 ba       	out	0x18, r1	; 24
			ls=0;              // set sensor status off
			rs=0;              // set sensor status off
		
		}

		if((rs==0b0000001)&(ls==0b0000000))  // check sensor status for left sensor=OFF and
  8e:	41 30       	cpi	r20, 0x01	; 1
  90:	51 05       	cpc	r21, r1
  92:	41 f4       	brne	.+16     	; 0xa4 <main+0x46>
  94:	21 15       	cp	r18, r1
  96:	31 05       	cpc	r19, r1
  98:	79 f4       	brne	.+30     	; 0xb8 <main+0x5a>
		                                     // right sensor=ON
		{
			 
			PORTB=0b00010000;    // turn right
  9a:	68 bb       	out	0x18, r22	; 24
			PORTD = (1<<4);
  9c:	62 bb       	out	0x12, r22	; 18
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	03 c0       	rjmp	.+6      	; 0xaa <main+0x4c>
			rs=0; 				 // set sensor status off	
			            
		}
	
	
		if((rs==0b0000000)&(ls==0b0001000))  // check sensor status for left sensor=ON and
  a4:	41 15       	cp	r20, r1
  a6:	51 05       	cpc	r21, r1
  a8:	39 f4       	brne	.+14     	; 0xb8 <main+0x5a>
  aa:	28 30       	cpi	r18, 0x08	; 8
  ac:	31 05       	cpc	r19, r1
  ae:	21 f4       	brne	.+8      	; 0xb8 <main+0x5a>
		                                     // right sensor=OFF
		{
			 
			PORTB=0b000000010;   // turn left
  b0:	e8 bb       	out	0x18, r30	; 24
			PORTD = (1<<4);
  b2:	62 bb       	out	0x12, r22	; 18
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
			 
		}
	
		

        if((rs==0b0000001)&(ls==0b0001000)) // check sensor status for both sensor ON 
  b8:	41 30       	cpi	r20, 0x01	; 1
  ba:	51 05       	cpc	r21, r1
  bc:	c1 f6       	brne	.-80     	; 0x6e <main+0x10>
  be:	28 30       	cpi	r18, 0x08	; 8
  c0:	31 05       	cpc	r19, r1
  c2:	a9 f6       	brne	.-86     	; 0x6e <main+0x10>
		
		{

			PORTB=0b00010010;  // move forward
  c4:	78 bb       	out	0x18, r23	; 24
  c6:	d3 cf       	rjmp	.-90     	; 0x6e <main+0x10>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
